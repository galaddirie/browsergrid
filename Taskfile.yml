version: '3'

vars:
  KIND_CLUSTER: browsergrid-dev
  KUBECONFIG: "{{.ROOT_DIR}}/kubeconfig"

tasks:
  kind:create:
    desc: Create the local kind cluster (browsergrid-dev)
    preconditions:
      - sh: command -v kind >/dev/null 2>&1
        msg: "kind is required. Install from https://kind.sigs.k8s.io/"
      - sh: command -v kubectl >/dev/null 2>&1
        msg: "kubectl is required. Install from https://kubernetes.io/docs/tasks/tools/"
    cmds:
      - |
        if ! kind get clusters | grep -q "{{.KIND_CLUSTER}}"; then
          kind create cluster --name {{.KIND_CLUSTER}} --config k8s/local/kind-config.yaml
        else
          echo "kind cluster {{.KIND_CLUSTER}} already exists"
        fi
      - kind get kubeconfig --name {{.KIND_CLUSTER}} > "{{.KUBECONFIG}}"

  kind:recreate:
    desc: Recreate the local kind cluster with updated configuration
    preconditions:
      - sh: command -v kind >/dev/null 2>&1
        msg: "kind is required. Install from https://kind.sigs.k8s.io/"
      - sh: command -v kubectl >/dev/null 2>&1
        msg: "kubectl is required. Install from https://kubernetes.io/docs/tasks/tools/"
    cmds:
      - task: kind:delete
      - kind create cluster --name {{.KIND_CLUSTER}} --config k8s/local/kind-config.yaml
      - kind get kubeconfig --name {{.KIND_CLUSTER}} > "{{.KUBECONFIG}}"

  kind:delete:
    desc: Delete the local kind cluster
    cmds:
      - |
        if kind get clusters | grep -q "{{.KIND_CLUSTER}}"; then
          kind delete cluster --name {{.KIND_CLUSTER}}
        else
          echo "kind cluster {{.KIND_CLUSTER}} already removed"
        fi
      - rm -f "{{.KUBECONFIG}}"

  k8s:bootstrap:
    desc: Create base browsergrid namespace, service accounts, and RBAC
    deps: [kind:create]
    cmds:
      - kubectl --kubeconfig "{{.KUBECONFIG}}" apply -f k8s/local/base.yaml

  browsers:load:
    desc: Build and load browser images into the kind cluster
    deps: [kind:create]
    cmds:
      - docker build -f docker/browsers/base/Dockerfile -t browsergrid/base:latest .
      - docker build -f docker/browsers/chrome/Dockerfile -t browsergrid/chrome:latest .
      - kind load docker-image browsergrid/base:latest browsergrid/chrome:latest --name {{.KIND_CLUSTER}}

  dev:build:
    desc: Build the Browsergrid server image and load it into kind
    deps: [kind:create]
    cmds:
      - docker build -f docker/server/Dockerfile -t browsergrid/app:dev .
      - kind load docker-image browsergrid/app:dev --name {{.KIND_CLUSTER}}

  dev:up:
    desc: Deploy Browsergrid into the local cluster
    deps: [k8s:bootstrap, dev:build]
    cmds:
      - kubectl --kubeconfig "{{.KUBECONFIG}}" apply -f k8s/local/deployment.yaml
  
  dev:port-forward:
    desc: Port forward the Browsergrid service
    deps: [dev:up]
    cmds:
      - kubectl --kubeconfig "{{.KUBECONFIG}}" -n browsergrid-dev port-forward svc/browsergrid 4000:4000

  dev:logs:
    desc: Tail Browsergrid logs from the cluster
    deps: [kind:create]
    cmds:
      - kubectl --kubeconfig "{{.KUBECONFIG}}" -n browsergrid-dev logs -f deploy/browsergrid


  resources:start:
    desc: Start shared resources (PostgreSQL, Redis, Adminer) using docker-compose
    cmds:
      - docker-compose -f docker/docker-compose.resources.yml up -d

  resources:stop:
    desc: Stop shared resources using docker-compose
    cmds:
      - docker-compose -f docker/docker-compose.resources.yml down

  resources:logs:
    desc: View logs from shared resources
    cmds:
      - docker-compose -f docker/docker-compose.resources.yml logs -f

  resources:wait:
    desc: Wait for PostgreSQL to be ready in docker-compose
    cmds:
      - |
        echo "Waiting for PostgreSQL to accept connections..."
        for attempt in $(seq 1 60); do
          if docker-compose -f docker/docker-compose.resources.yml exec -T postgres pg_isready -U postgres -d browsergrid_dev >/dev/null 2>&1; then
            echo "PostgreSQL is ready"
            exit 0
          fi
          sleep 1
        done
        echo "PostgreSQL did not become ready in time" >&2
        exit 1

  dev:init:
    desc: Complete local development setup with volume mounts
    cmds:
      - task: resources:start
      - task: resources:wait
      - task: kind:recreate
      - task: k8s:bootstrap
      - task: browsers:load
      - task: dev:build
      - task: dev:up
      - |
        MIX_ENV=dev mix ecto.create
        MIX_ENV=dev mix ecto.migrate

  destroy:
    desc: Tear down all local Kubernetes resources and stop resources
    cmds:
      - task: resources:stop
      - task: kind:delete
