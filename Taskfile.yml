version: '3'

vars:
  KIND_CLUSTER: browsergrid-dev
  KUBECONFIG: "{{.ROOT_DIR}}/kubeconfig"
  BROWSER: '{{.BROWSER | default "$(uname -s | grep -q Darwin && echo chromium || echo chrome)"}}'
  BROWSER_TYPES: "chrome chromium"

tasks:
  kind:create:
    desc: Create the local kind cluster (browsergrid-dev)
    preconditions:
      - sh: command -v kind >/dev/null 2>&1
        msg: "kind is required. Install from https://kind.sigs.k8s.io/"
      - sh: command -v kubectl >/dev/null 2>&1
        msg: "kubectl is required. Install from https://kubernetes.io/docs/tasks/tools/"
    cmds:
      - |
        if ! kind get clusters | grep -q "{{.KIND_CLUSTER}}"; then
          kind create cluster --name {{.KIND_CLUSTER}} --config k8s/local/kind-config.yaml
        else
          echo "kind cluster {{.KIND_CLUSTER}} already exists"
        fi
      - kind get kubeconfig --name {{.KIND_CLUSTER}} > "{{.KUBECONFIG}}"

  kind:recreate:
    desc: Recreate the local kind cluster with updated configuration
    preconditions:
      - sh: command -v kind >/dev/null 2>&1
        msg: "kind is required. Install from https://kind.sigs.k8s.io/"
      - sh: command -v kubectl >/dev/null 2>&1
        msg: "kubectl is required. Install from https://kubernetes.io/docs/tasks/tools/"
    cmds:
      - task: kind:delete
      - kind create cluster --name {{.KIND_CLUSTER}} --config k8s/local/kind-config.yaml
      - kind get kubeconfig --name {{.KIND_CLUSTER}} > "{{.KUBECONFIG}}"

  kind:delete:
    desc: Delete the local kind cluster
    cmds:
      - |
        if kind get clusters | grep -q "{{.KIND_CLUSTER}}"; then
          kind delete cluster --name {{.KIND_CLUSTER}}
        else
          echo "kind cluster {{.KIND_CLUSTER}} already removed"
        fi
      - rm -f "{{.KUBECONFIG}}"

  k8s:bootstrap:
    desc: Create base browsergrid namespace, service accounts, and RBAC
    deps: [kind:create]
    cmds:
      - kubectl --kubeconfig "{{.KUBECONFIG}}" apply -f k8s/local/base.yaml

  browsers:load:
    desc: Build and load browser images into the kind cluster (use BROWSER=chrome|chromium)
    deps: [kind:create, browsers:build]
    cmds:
      - kind load docker-image browsergrid/base:latest browsergrid/{{.BROWSER}}:latest --name {{.KIND_CLUSTER}}

  browsers:load-all:
    desc: Build and load all browser images into the kind cluster (skips Chrome on Mac/ARM)
    deps: [kind:create]
    cmds:
      - |
        # Detect system type
        if uname -s | grep -q Darwin; then
          IS_MAC=true
        else
          IS_MAC=false
        fi

        if uname -m | grep -q arm; then
          IS_ARM=true
        else
          IS_ARM=false
        fi

        # Determine which browsers to build and load
        BROWSERS_TO_BUILD="{{.BROWSER_TYPES}}"
        if [ "$IS_MAC" = "true" ] && [ "$IS_ARM" = "true" ]; then
          echo "Detected Mac ARM system - skipping Chrome, building Chromium only"
          BROWSERS_TO_BUILD="chromium"
        else
          echo "Building all browsers: $BROWSERS_TO_BUILD"
        fi

        # Build base image once
        echo "Building browser base..."
        BROWSER=chrome docker-compose -f docker/docker-compose.browsers.yml build base

        # Build and load each browser
        for browser in $BROWSERS_TO_BUILD; do
          echo "Building and loading $browser..."
          BROWSER=$browser docker-compose -f docker/docker-compose.browsers.yml build browser
          kind load docker-image browsergrid/base:latest browsergrid/$browser:latest --name {{.KIND_CLUSTER}}
        done

  browsers:build:
    desc: Build browser images using docker-compose (use BROWSER=chrome|chromium)
    cmds:
      - |
        if ! echo "{{.BROWSER_TYPES}}" | grep -q "{{.BROWSER}}"; then
          echo "Error: Invalid browser type '{{.BROWSER}}'"
          echo "Supported browsers: {{.BROWSER_TYPES}}"
          exit 1
        fi
        echo "Building browser base..."
        BROWSER={{.BROWSER}} docker-compose -f docker/docker-compose.browsers.yml build base
        echo "Building {{.BROWSER}} image..."
        BROWSER={{.BROWSER}} docker-compose -f docker/docker-compose.browsers.yml build browser

  browsers:up:
    desc: Spin up browser container in docker-compose (use BROWSER=chrome|chromium)
    deps: [browsers:build]
    cmds:
      - |
        if ! echo "{{.BROWSER_TYPES}}" | grep -q "{{.BROWSER}}"; then
          echo "Error: Invalid browser type '{{.BROWSER}}'"
          echo "Supported browsers: {{.BROWSER_TYPES}}"
          exit 1
        fi
        echo "Starting services with {{.BROWSER}}..."
        BROWSER={{.BROWSER}} docker-compose -f docker/docker-compose.browsers.yml up -d browser

  browsers:logs:
    desc: View logs from browser container (use BROWSER=chrome|chromium)
    cmds:
      - BROWSER={{.BROWSER}} docker-compose -f docker/docker-compose.browsers.yml logs -f browser

  browsers:shell:
    desc: Open shell in browser container (use BROWSER=chrome|chromium)
    cmds:
      - |
        echo "Opening shell in {{.BROWSER}} container..."
        BROWSER={{.BROWSER}} docker-compose -f docker/docker-compose.browsers.yml exec browser /bin/bash

  browsers:down:
    desc: Stop browser container (use BROWSER=chrome|chromium)
    cmds:
      - BROWSER={{.BROWSER}} docker-compose -f docker/docker-compose.browsers.yml down

  dev:build:
    desc: Build the Browsergrid server image and load it into kind
    deps: [kind:create]
    cmds:
      - docker build -f docker/server/Dockerfile.dev -t browsergrid/app:dev .
      - kind load docker-image browsergrid/app:dev --name {{.KIND_CLUSTER}}

  dev:up:
    desc: Deploy Browsergrid into the local cluster
    deps: [k8s:bootstrap, dev:build, resources:start]
    cmds:
      - |
        set -a
        . .env
        set +a
        envsubst < k8s/local/deployment.yaml | kubectl --kubeconfig "{{.KUBECONFIG}}" apply -f -

  dev:restart:
    desc: Restart Browsergrid in the local cluster
    cmds:
      - kubectl --kubeconfig "{{.KUBECONFIG}}" rollout restart deploy/browsergrid -n browsergrid-dev

  dev:logs:
    desc: Follow logs from the active Browsergrid pod
    cmds:
      - |
        POD=$(kubectl --kubeconfig "{{.KUBECONFIG}}" get pods -n browsergrid-dev -l app=browsergrid --sort-by=.metadata.creationTimestamp -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | tail -n1)
        if [ -z "$POD" ]; then
          echo "No browsergrid pods found" >&2
          exit 1
        fi
        echo "Streaming logs from $POD"
        kubectl --kubeconfig "{{.KUBECONFIG}}" logs "$POD" -n browsergrid-dev -f

  dev:logs:previous:
    desc: Show logs from the prior Browsergrid pod instance after a restart
    cmds:
      - |
        POD=$(kubectl --kubeconfig "{{.KUBECONFIG}}" get pods -n browsergrid-dev -l app=browsergrid --sort-by=.metadata.creationTimestamp -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | tail -n1)
        if [ -z "$POD" ]; then
          echo "No browsergrid pods found" >&2
          exit 1
        fi
        echo "Displaying previous logs for $POD"
        kubectl --kubeconfig "{{.KUBECONFIG}}" logs "$POD" -n browsergrid-dev --previous

  dev:logs:describe:
    desc: Inspect the current Browsergrid pod status and restart history
    cmds:
      - |
        POD=$(kubectl --kubeconfig "{{.KUBECONFIG}}" get pods -n browsergrid-dev -l app=browsergrid --sort-by=.metadata.creationTimestamp -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | tail -n1)
        if [ -z "$POD" ]; then
          echo "No browsergrid pods found" >&2
          exit 1
        fi
        kubectl --kubeconfig "{{.KUBECONFIG}}" describe pod "$POD" -n browsergrid-dev
  
  dev:delete:
    desc: Delete the Browsergrid deployment from the local cluster
    cmds:
      - kubectl --kubeconfig "{{.KUBECONFIG}}" delete deploy/browsergrid -n browsergrid-dev

  resources:start:
    desc: Start shared resources (PostgreSQL, Redis, Adminer) using docker-compose
    cmds:
      - docker-compose -f docker/docker-compose.resources.yml up -d

  resources:stop:
    desc: Stop shared resources using docker-compose
    cmds:
      - docker-compose -f docker/docker-compose.resources.yml down

  resources:logs:
    desc: View logs from shared resources
    cmds:
      - docker-compose -f docker/docker-compose.resources.yml logs -f

  resources:wait:
    desc: Wait for PostgreSQL to be ready in docker-compose
    cmds:
      - |
        echo "Waiting for PostgreSQL to accept connections..."
        for attempt in $(seq 1 60); do
          if docker-compose -f docker/docker-compose.resources.yml exec -T postgres pg_isready -U postgres -d browsergrid_dev >/dev/null 2>&1; then
            echo "PostgreSQL is ready"
            exit 0
          fi
          sleep 1
        done
        echo "PostgreSQL did not become ready in time" >&2
        exit 1

  dev:init:
    desc: Complete local development setup with volume mounts
    cmds:
      - task: resources:start
      - task: resources:wait
      - task: kind:recreate
      - task: k8s:bootstrap
      - task: browsers:load-all
      - task: dev:build
      - task: dev:up
      - |
        MIX_ENV=dev mix ecto.create
        MIX_ENV=dev mix ecto.migrate

  destroy:
    desc: Tear down all local Kubernetes resources and stop resources
    cmds:
      - task: resources:stop
      - task: kind:delete
