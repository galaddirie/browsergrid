name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 0.1.1)'
        required: true
      type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.16.2'
          otp-version: '26.2'

      - name: Install dependencies
        run: mix deps.get

      - name: Set release version
        id: set-version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            RELEASE_VERSION="${{ github.event.inputs.version }}"
          else
            # Get current version from mix.exs
            CURRENT_VERSION=$(grep -o 'version: "[^"]*"' mix.exs | cut -d'"' -f2)
            echo "Current version: $CURRENT_VERSION"

            # Calculate next version based on type using Elixir
            case "${{ github.event.inputs.type }}" in
              "patch")
                RELEASE_VERSION=$(elixir -e "
                  [major, minor, patch] = String.split('$CURRENT_VERSION', '.')
                  IO.puts(major <> '.' <> minor <> '.' <> Integer.to_string(String.to_integer(patch) + 1))
                ")
                ;;
              "minor")
                RELEASE_VERSION=$(elixir -e "
                  [major, minor, _] = String.split('$CURRENT_VERSION', '.')
                  IO.puts(major <> '.' <> Integer.to_string(String.to_integer(minor) + 1) <> '.0')
                ")
                ;;
              "major")
                RELEASE_VERSION=$(elixir -e "
                  [major, _, _] = String.split('$CURRENT_VERSION', '.')
                  IO.puts(Integer.to_string(String.to_integer(major) + 1) <> '.0.0')
                ")
                ;;
            esac
          fi

          echo "release_version=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "Release version: $RELEASE_VERSION"

      - name: Update version in mix.exs
        run: |
          sed -i "s/version: \"[^\"]*\"/version: \"${{ env.release_version }}\"/" mix.exs

      - name: Update CHANGELOG.md with release date
        run: |
          # Get today's date
          TODAY=$(date +%Y-%m-%d)

          # Update the CHANGELOG.md entry with today's date
          sed -i "s/## \[${{ env.release_version }}\].*$/## [${{ env.release_version }}] - $TODAY/" CHANGELOG.md

          # Add a new section for the next development version in unreleased format
          # (will be updated during actual release)
          UNRELEASED="## [Unreleased]\n\n### Added\n\n### Fixed\n\n### Changed\n"
          sed -i "s/# Changelog/# Changelog\n\n$UNRELEASED/" CHANGELOG.md

      - name: Extract changelog for release
        id: extract-changelog
        run: |
          # Extract changelog for this version
          # This is a simple extraction - you may want to create a more sophisticated script
          awk "
          BEGIN { in_version=0; content=\"\" }
          /^## \\[${{ env.release_version }}\\]/ { in_version=1; next }
          /^## \\[.*\\]/ && in_version { exit }
          in_version && /^### / { content = content \$0 \"\\n\" }
          in_version && !/^#/ && !/^[[:space:]]*$/ { content = content \$0 \"\\n\" }
          END { print content }
          " CHANGELOG.md > changelog_extract.md

      - name: Commit version changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: prepare release v${{ env.release_version }}"
          file_pattern: 'mix.exs CHANGELOG.md'

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.release_version }}
          name: "Version ${{ env.release_version }}"
          draft: true
          generate_release_notes: false
          body_path: changelog_extract.md
